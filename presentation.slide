Go Tips and Tricks for Beginners
18:00 25 Jan 2016
Tags: go

Cory LaNou
Core Database Developer - InfluxData
http://github.com/corylanou
@corylanou

* This talk will not teach you Go

But there are great resources on it, and they have great documentation.

.link http://golang.org golang.org

This talk will include:

- Why Go?
- Formatting tips
- Error handling tips
- Consistent function returns
- Testing output

* Get on Gopher Slack

.link http://bit.ly/go-slack-signup http://bit.ly/go-slack-signup

After Signing Up:

.link https://gophers.slack.com/messages/chicago/ https://gophers.slack.com/messages/chicago/

We will use the Chicago channel to share links for the presentation.

* Join your local Go Meetup!

.link http://www.meetup.com/Chicago-Hardcore-Golang/ Chicago Hardcore Golang

* Where can I find this slide deck?

This slide deck can be found here:

.link http://go-talks.appspot.com/github.com/corylanou/go-tips-tricks-for-beginners/presentation.slide http://go-talks.appspot.com/github.com/corylanou/go-tips-tricks-for-beginners/presentation.slide

The repo for the presentation is here:

.link https://github.com/corylanou/go-1-hour-boot-camp https://github.com/corylanou/go-tips-tricks-for-beginners

* Companies using Go

- Google / Facebook / Yahoo
- Rackspace / Digital Ocean / Heroku
- Shopify / Booking.com / Medium
- IBM / Comcast / Canonical
- Square
- SendGrid / Bitly
- Docker
- Dropbox

.link https://github.com/golang/go/wiki/GoUsers Companies using Go according to Go Wiki

* so... why go?

* Because we have an awesome mascott!

.image code/intro/img/gopher.jpg

* But seriously...

- Go was created to make software engineering easier
- Software needs to scale beyond machine scale, but at human scale as well

Think of a company that employs over 20,000 software engineers like Google!

* In the words of Andrew Gerrand

- software _should_ be simple
- software _can_ be simple

* What Andrew means by "simple"

- Small
- Readable
- Consistent
- Orthogonal
- Predictable
- Robust
- Useful by default

NOTE: For computing, _orthogonal_ means isolated or partitioned.

* Go at a glance

- Compiled
- Statically typed
- Clean syntax
- Simple type system
- Concurrency primitives
- Rich standard library
- Open source
- Great Tools
- Testing and Benchmarking


* The "go" command

- It's the primary tool for working with go projects
- It runs tests
- It runs benchmarks
- It formats your code
- and more...

  build       compile packages and dependencies
  clean       remove object files
  env         print Go environment information
  fix         run go tool fix on packages
  fmt         run gofmt on package sources
  get         download and install packages and dependencies
  install     compile and install packages and dependencies
  list        list packages
  run         compile and run Go program
  test        test packages
  tool        run specified go tool
  version     print Go version
  vet         run go tool vet on packages

* Hello, Go

.play code/intro/hello.go

* goroutines - first of two concurrency primitive

Go routines are light weight threads that are managed by the Go runtime. 
To run a function in a new go routine, just put "go" before the function call.

.play code/intro/routine.go

* channels - second concurrency primitive

Channels are typed conduits for synchronization and communication between go routines.

But we are not going to look at them today (there is no time)

* net/http (1/2)

The net/http package provides a HTTP client.

.play code/intro/net_1.go /START OMIT/,/END OMIT/

The client handles HTTP Keep-Alive using a pool of connections, by default. 
(This is configurable, of course.)

* net/http (2/2)

The net/http package also provides an HTTP server.

.play code/intro/net_2.go /START OMIT/,/END OMIT/

This is a high-performance, DoS-hardened, production-ready web server.
It serves dl.google.com

* Go Editors

.link https://atom.io/ ATOM
.link http://www.sublimetext.com/ Sublime Text

Both have Go Plugins

.link https://atom.io/packages/go-plus ATOM go-plus
.link https://github.com/DisposaBoy/GoSublime GoSublime

And my favorite if you are a VIM user:

.link https://github.com/fatih/vim-go

For simple programs or examples:

.link http://play.golang.org Go Playground

* enough about why, some me some tips and tricks...

* The fmt Package

Used by importing the fmt package as follows:

import "fmt"

General:

  %v  the value in a default format.
  %+v When printing structs, adds field names
  %#v a Go-syntax representation of the value
  %T  a Go-syntax representation of the type of the value
  %%  a literal percent sign; consumes no value

* fmt General verbs - simple string

.play code/fmt1/main.go /START OMIT/,/END OMIT/

* fmt General verbs - struct (part 1)

.code code/fmt2/main.go /^type/,/^\)/

* fmt General verbs - struct (part 2)

.play code/fmt2/main.go /START OMIT/,/END OMIT/

* fmt - Generating Errors with errors.New()

This is my least favorite way of seeing erors created.

.play code/fmt_error1/main.go /START OMIT/,/END OMIT/

* fmt - Generating Errors with fmt.Errorf()

This is how I create errors.

.play code/fmt_error2/main.go /START OMIT/,/END OMIT/

* Consistent function Returns - Bad

.code code/function_returns/bad.go /START OMIT/,/END OMIT/

* Consistent function Returns - Good

.code code/function_returns/good.go /START OMIT/,/END OMIT/

* Testing output - Poor

.code code/foo/foo_test.go /START POOR-OMIT/,/END POOR-OMIT/

*Output*

	--- FAIL: Test_AddTen (0.00s)
		foo_test.go:12: unexpected value

* Testing output - Better

.code code/foo/foo_test.go /START BETTER-OMIT/,/END BETTER-OMIT/

*Output*

	--- FAIL: Test_AddTenBetter (0.00s)
		foo_test.go:19: unexpected value, got 12

* Testing output - Better Yet

.code code/foo/foo_test.go /START BETTER-YET-OMIT/,/END BETTER-YET-OMIT/

*Output*

	--- FAIL: Test_AddTenBetterYet (0.00s)
		foo_test.go:26: unexpected value, exp: 11, got 12

* Testing output - Best

.code code/foo/foo_test.go /START BEST-OMIT/,/END BEST-OMIT/

*Output*

	--- FAIL: Test_AddTenBest (0.00s)
		foo_test.go:32: unexpected value, exp: 11, got 12

*NOTE:* Not all my colleagues agree with me that this is the best.

* Code Resources

.link https://github.com/corylanou/go-tips-tricks-for-beginners github.com/corylanou/go-tips-tricks-for-beginners | (This Presentation and source)
.link http://golang.org/pkg/fmt golang.org/pkg/fmt
.link http://godoc.org/code.google.com/p/go.tools/present present (what this presentation was created with)

* Questions?
