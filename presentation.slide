Go Tips and Tricks for Beginners
18:30 16 Aug 2016
Tags: go

Cory LaNou
Core Database Developer - InfluxData
http://github.com/corylanou
@corylanou

* This talk will not teach you Go

But there are great resources on it, and they have great documentation.

.link http://golang.org golang.org

This talk will include:

- Why Go?
- Formatting tips
- Error handling tips
- Consistent function returns
- Testing output

* Get on Gopher Slack

.link http://bit.ly/go-slack-signup http://bit.ly/go-slack-signup

After Signing Up:

.link https://gophers.slack.com/messages/chicago/ https://gophers.slack.com/messages/chicago/

We will use the Chicago channel to share links for the presentation.

* The fmt Package

Used by importing the fmt package as follows:

import "fmt"

General:

  %v  the value in a default format.
  %+v When printing structs, adds field names
  %#v a Go-syntax representation of the value
  %T  a Go-syntax representation of the type of the value
  %%  a literal percent sign; consumes no value

* fmt General verbs - simple string

.play code/fmt1/main.go /START OMIT/,/END OMIT/

* fmt General verbs - struct (part 1)

.code code/fmt2/main.go /^type/,/^\)/

* fmt General verbs - struct (part 2)

.play code/fmt2/main.go /START OMIT/,/END OMIT/


* fmt General verbs - struct (part 3)

.code code/fmt3/main.go /^import/,/$/

.play code/fmt3/main.go /START OMIT/,/END OMIT/

* fmt - Generating Errors with errors.New()

This is my least favorite way of seeing erors created.

.play code/fmt_error1/main.go /START OMIT/,/END OMIT/

* fmt - Generating Errors with fmt.Errorf()

This is how I create errors.

.play code/fmt_error2/main.go /START OMIT/,/END OMIT/

* Consistent function Returns - Bad

.code code/function_returns/bad.go /START OMIT/,/END OMIT/

* Consistent function Returns - Good

.code code/function_returns/good.go /START OMIT/,/END OMIT/

* Testing output - Poor

.code code/foo/foo_test.go /START POOR-OMIT/,/END POOR-OMIT/

*Output*

	--- FAIL: Test_AddTen (0.00s)
		foo_test.go:12: unexpected value

* Testing output - Better

.code code/foo/foo_test.go /START BETTER-OMIT/,/END BETTER-OMIT/

*Output*

	--- FAIL: Test_AddTenBetter (0.00s)
		foo_test.go:19: unexpected value, got 12

* Testing output - Better Yet

.code code/foo/foo_test.go /START BETTER-YET-OMIT/,/END BETTER-YET-OMIT/

*Output*

	--- FAIL: Test_AddTenBetterYet (0.00s)
		foo_test.go:26: unexpected value, exp: 11, got 12

* Testing output - Best

.code code/foo/foo_test.go /START BEST-OMIT/,/END BEST-OMIT/

*Output*

	--- FAIL: Test_AddTenBest (0.00s)
		foo_test.go:32: unexpected value, exp: 11, got 12

*NOTE:* Not all my colleagues agree with me that this is the best.

* Code Resources

.link https://github.com/corylanou/go-tips-tricks-for-beginners github.com/corylanou/go-tips-tricks-for-beginners | (This Presentation and source)
.link http://golang.org/pkg/fmt golang.org/pkg/fmt
.link http://godoc.org/code.google.com/p/go.tools/present present (what this presentation was created with)

* Questions?
